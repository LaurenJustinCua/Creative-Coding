let paddle;
let balls = [];
let score = 0;
let gameOver = false;

function setup() {
    createCanvas(400, 600);
    paddle = new Paddle();
}

function draw() {
    background(250);
    
    if (!gameOver) {
        paddle.display();
        paddle.move();

        if (frameCount % 60 == 0) {
            balls.push(new Ball());
        }

        for (let i = balls.length - 1; i >= 0; i--) {
            balls[i].move();
            balls[i].display();

            if (balls[i].hits(paddle)) {
                score++;
                balls.splice(i, 1);
            } else if (balls[i].offScreen()) {
                gameOver = true;
            }
        }

        fill(100);
        textSize(24);
        text("Score: " + score, 10, 30);
    } else {
        fill(0);
        textSize(32);
        textAlign(CENTER);
        text("Game Over!", width / 2, height / 2);
        textSize(24);
        text("Score: " + score, width / 2, height / 2 + 40);
    }
}

class Paddle {
    constructor() {
        this.w = 100;
        this.h = 20;
        this.x = width / 2 - this.w / 2;
        this.y = height - 40;
        this.speed = 10;
    }

    display() {
        fill(250, 100, 250);
        rect(this.x, this.y, this.w, this.h);
    }

    move() {
        if (keyIsDown(LEFT_ARROW)) {
            this.x -= this.speed;
        }
        if (keyIsDown(RIGHT_ARROW)) {
            this.x += this.speed;
        }
        this.x = constrain(this.x, 0, width - this.w);
    }
}

class Ball {
    constructor() {
        this.x = random(width);
        this.y = 0;
        this.r = 20;
        this.speed = 5;
    }

    move() {
        this.y += this.speed;
    }

    display() {
        fill(80, 50, 100);
        ellipse(this.x, this.y, this.r * 2);
    }

    hits(paddle) {
        return (this.y + this.r > paddle.y &&
                this.y - this.r < paddle.y + paddle.h &&
                this.x + this.r > paddle.x &&
                this.x - this.r < paddle.x + paddle.w);
    }

    offScreen() {
        return this.y - this.r > height;
    }
}
